name: Next.js with Cypress

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CYPRESS_SLOW_MO: 0
  CYPRESS_BASE_URL: ${{ secrets.NEXT_BASE_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Changed from '20-lts' to '20.x' which is the correct syntax

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js
        run: npm run build

      # Workaround for .next upload - create a tar.gz file first
      - name: Create .next.tar.gz
        run: |
          mkdir -p build-artifact
          tar -czvf build-artifact/.next.tar.gz -C . .next

      # Upload the .next.tar.gz as artifact
      - name: Upload .next.tar.gz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: build-artifact/.next.tar.gz

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      chrome:
        image: docker://brightsec/chrome-cypress:latest
        options: --headless

    steps:
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      # Download the .next.tar.gz artifact
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .

      # Extract the .next.tar.gz
      - name: Extract .next
        run: |
          mkdir -p build-artifact
          tar -xzvf .next.tar.gz -C build-artifact
          mv build-artifact/.next .

      # Run Cypress tests
      - name: Run Cypress tests
        run: |
          # We need to create a virtual Next.js environment
          npm install # Reinstall dependencies to ensure all packages are present
          npx cypress run --headless
        env:
          CI: true
          BASE_URL: ${{ secrets.NEXT_BASE_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel
        run: npx vercel deploy --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
